import { ConnectButton } from "@rainbow-me/rainbowkit";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import axios from "axios";
import { type WalletClient, usePublicClient, useWalletClient } from "wagmi";
import React, { useState } from "react";
import { providers } from "ethers";
import { useSession, signIn, signOut } from "next-auth/react"

type SessionUserType = {
  email: string;
  account: string;
}

const Home: NextPage = () => {
  const { data: session } = useSession()

  const [toAddress, setToAddress] = useState<string>('');
  const { data } = useWalletClient();
  const publicClient = usePublicClient();
  const signer = useEthersSigner({
    chainId: publicClient.chain.id,
  });

  const setLimit = async () => {
    const transaction = await axios.post(`/api/limit`);
  };

  const sendETH = async () => {
    await axios.post(`/api/send-eth`);
  }

  if (session) {
    return (
      <div className={styles.container}>
        <Head>
          <title>RainbowKit App</title>
          <meta
            content="Generated by @rainbow-me/create-rainbowkit"
            name="description"
          />
          <link href="/favicon.ico" rel="icon" />
        </Head>

        <main className={styles.main}>
          <ConnectButton />
          <button onClick={setLimit}>Set Limit</button>

          <span className="">{(session?.user as any)?.account}</span>
          <input
            type="text"
            placeholder="Enter text..."
            value={toAddress} // Set the value of the input field
            onChange={(e) => setToAddress(e.target.value)} // Handle changes to the input
          />
          <button
            onClick={sendETH}
          >
            Send 1 ETH
          </button>
          <button onClick={() => signOut()}>Logout</button>
        </main>

        <footer className={styles.footer}>
          <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
            Made with ‚ù§Ô∏è by your frens at üåà
          </a>
        </footer>
      </div>
    )
  }

  return (
    <div>
      <button onClick={() => signIn('google')}>sign in with gooogle</button>
    </div>
  )
};

export function walletClientToSigner(walletClient: WalletClient) {
  const { account, chain, transport } = walletClient;
  const network = {
    chainId: chain.id,
    name: chain.name,
    ensAddress: chain.contracts?.ensRegistry?.address,
  };
  const provider = new providers.Web3Provider(transport, network);
  const signer = provider.getSigner(account.address);
  return signer;
}

/** Hook to convert a viem Wallet Client to an ethers.js Signer. */
export function useEthersSigner({ chainId }: { chainId?: number } = {}) {
  const { data: walletClient } = useWalletClient({ chainId });
  return React.useMemo(
    () => (walletClient ? walletClientToSigner(walletClient) : undefined),
    [walletClient]
  );
}

export default Home;
